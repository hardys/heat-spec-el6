diff --git a/heat/common/crypt.py b/heat/common/crypt.py
index 28c11f5..d164492 100644
--- a/heat/common/crypt.py
+++ b/heat/common/crypt.py
@@ -14,8 +14,8 @@
 #    under the License.
 
 import base64
-from Crypto.Cipher import AES
-from Crypto import Random
+import M2Crypto
+import os
 
 from oslo.config import cfg
 
@@ -36,17 +36,19 @@ logger = logging.getLogger(__name__)
 def encrypt(auth_info):
     if auth_info is None:
         return None
-    iv = Random.new().read(AES.block_size)
-    cipher = AES.new(cfg.CONF.auth_encryption_key[:32], AES.MODE_CFB, iv)
-    res = base64.b64encode(iv + cipher.encrypt(auth_info))
-    return res
+    iv = os.urandom(16)
+    cipher = M2Crypto.EVP.Cipher(alg='aes_128_cbc',
+                                 key=cfg.CONF.auth_encryption_key, iv=iv,
+                                 op=1) # 1 is encode
+    return base64.b64encode(iv + cipher.update(auth_info) + cipher.final())
 
 
 def decrypt(auth_info):
     if auth_info is None:
         return None
     auth = base64.b64decode(auth_info)
-    iv = auth[:AES.block_size]
-    cipher = AES.new(cfg.CONF.auth_encryption_key[:32], AES.MODE_CFB, iv)
-    res = cipher.decrypt(auth[AES.block_size:])
-    return res
+    iv = auth[:16]
+    cipher = M2Crypto.EVP.Cipher(alg='aes_128_cbc',
+                                 key=cfg.CONF.auth_encryption_key, iv=iv,
+                                 op=0) # 0 is decode
+    return cipher.update(auth[16:]) + cipher.final()
